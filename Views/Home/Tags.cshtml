@{
    ViewData["Title"] = "Tags";
    DocsInit init = (DocsInit)ViewData["init"];
    string search = init.Request.Query["search"].FirstOrDefault() ?? "";
}

The system recognizes <code>@DocsStatic.Meta.Tags.Count</code> tags!
<hr>
Search: <input type="text" id="boxysearchy" placeholder="Search...">
<script type="text/javascript">document.getElementById('boxysearchy').addEventListener('keydown', function(e) { if (!e)  { var e = window.event; } if (e.keyCode == 13) { document.location.href = '?search=' + document.getElementById('boxysearchy').value; } }, false);</script>
<hr>
@{
    IEnumerable<ScriptTag> tags = DocsStatic.Meta.Tags.OrderBy((c) => c.Name);
    string prev = "";
    foreach (ScriptTag tag in tags)
    {
        if (!tag.Name.Contains(search))
        {
            continue;
        }
        string tobj = tag.Name.Split('.')[0];
        if (tobj != prev)
        {
            prev = tobj;
            <a href="#tagb_@tobj">@tobj</a>
        }
    }
    prev = "";
    string hl = DocsStatic.Config["highlight"];
    foreach (ScriptTag tag in tags)
    {
        if (!tag.Name.Contains(search))
        {
            continue;
        }
        string tobj = tag.Name.Split('.')[0];
        if (tobj != prev)
        {
            @DocsStatic.SECTION_SEPARATOR
            <a id="tagb_@tobj" href="#tagb_@tobj">@tobj</a>
            <hr>
            foreach (ScriptTag tag_n in tags)
            {
                if (!tag_n.Name.Contains(search))
                {
                    continue;
                }
                string tobj_n = tag_n.Name.Split('.')[0];
                if (tobj_n == tobj)
                {
                    <a href="#tag_@tag_n.Name">@tag_n.Name</a>
                }
            }
            prev = tobj;
        }
        @DocsStatic.SECTION_SEPARATOR
        <a id="tag_@tag.Name" href="#tag_@tag.Name">@tag.Name</a>
        <table class="meta">
            <tr><td class="small">@tag.Group Tag</td><td>@tag.Name</td></tr>
            <tr><td class="small">Source</td><td>@tag.SourceLocation</td></tr>
            <tr><td class="small">Required Addon(s)</td><td>@tag.Addon</td></tr>
            <tr><td class="small">Last Updated</td><td>@tag.Updated</td></tr>
            <tr><td class="small">Returns</td><td>@tag.Returns</td></tr>
            <tr><td class="small">ReturnType</td><td>@tag.ReturnType</td></tr>
            @for (int i = 0; i < tag.Examples.Count; i++)
            {
                <tr><td class="small">Example</td><td>@tag.Examples[i]</td></tr>
            }
            @for (int i = 0; i < tag.Notes.Count; i++)
            {
                <tr><td class="small">Note</td><td>@tag.Notes[i]</td></tr>
            }
            @for (int i = 0; i < tag.Warnings.Count; i++)
            {
                <tr><td class="small">Warning</td><td><span class="meta_warning">@tag.Warnings[i]</span></td></tr>
            }
        </table>
    }
}
